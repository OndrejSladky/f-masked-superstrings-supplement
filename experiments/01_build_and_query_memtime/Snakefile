import socket

shell.prefix("set -euo pipefail")


configfile: "config.yaml"


HOSTNAME = socket.gethostname()
if HOSTNAME == "":
    HOSTNAME = "NA"
print(HOSTNAME)

CAMEL = "../../kmercamel/kmercamel"
FMSI = "../../fmsi/fmsi"
PROPHASM = "../../prophasm/prophasm"
PROPHEX = "../../prophex/prophex"
BWA = "../../bwa/bwa"
SBWT = "../../SBWT/build/bin/sbwt"
# SBWT variant: not with Elias-Fano "WARNING: This program was compiled for a CPU without support for the BMI2 instruction set. The performance of the Elias-Fano variants will be very bad."
SBWT_VARIANT = "plain-matrix"  # choosing the default variant now as it achieves the best query times in SBWT paper; for index size: "rrr-subsetwt" has nearly as small index as "mef-concat", but the latter produces a warning on kamenac
SBWT_TMP_DIR = "sbwt-tmp/" #/tmp/ -- PV: note: not on servers as they have limited root dist
SBWT_RAM = "10" # SBWT -m param.: "RAM budget in gigabytes (not strictly enforced). Must be at least 2. (default: 2)"
CBL_PREF = "../../CBL/target.k_" # NOTE: CBL is compiled for every k separately
CBL_SUFF = "/release/examples/cbl"
BWA_PARAM_W = 999999
NUM_THREADS = 1 # NOTE: using only 1 thread for prophex and SBWT, even though they can use more threads (for query or index building, resp., but not both)
GET_QUERIES = "../../scripts/get_queries.py"

NUM_QUERIES = 1000000

# NOTE: ProPhex default MAX_NODES_COUNT = 10^5 changed to 10^6

SUBSAMPLED_DIR = "../../data/subsampled"

D_VALS = range(1, 6) # only for local; not used now
K_VALS = list(range(19, 25, 2)) # NOTE: removing small k so that negative queries can be generated at all
K_VALS.append(31)
R_VALS = ["0.001", "0.5", "1.0"] #"0.000000001", "0.0001", "0.001", "0.01", "0.05", 
R_VALS_LARGE = ["0.01", "1.0"] # currently for E.coli
CAMEL_ALGS = ["global", "local"] #, "local", "globalAC", "localAC"] #"streaming", 
#M_ALGS = ["default", "zeros", "ones", "runs"] # masks not optimized now
GENOMES_SUBSAMPLED = ["spneumo_pangenome_k32"] 

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# TODO:
# - !!! for large datasets: compress the masked superstring output by Camel or ProphAsm
# - either increase precision in time output, or run more queries (processing 100000 queries by SBWT or ProPhex takes 10s of miliseconds in some cases)
# - consider mask optimization? It probably won't make any difference, right?
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

if config["testing"]:
    D_VALS = [1]
    K_VALS = [11]
    R_VALS = ["0.5"]
    testing_suffix = "__test"
else:
    testing_suffix = ""

# TODO: to simplify

### All combination of params to be tested
prefs_MS_comp = set()
prefs_Pro_comp = set() # for ProPhex, BWA and CBL
prefs_SBWT_comp = set()
prefs_CBL_comp = set()
for g in GENOMES_SUBSAMPLED:
    R_VALS_MOD = R_VALS
    if g == "escherichia_coli.k32":
        R_VALS_MOD = R_VALS_LARGE
    for S in CAMEL_ALGS:
        for k in K_VALS:
            for d in filter(lambda d: d < k, D_VALS): # filter out d larger than k
                for r in R_VALS_MOD:
                    # here we can remove unwanted combinations / replace non-sense combinations of params
                    if S in ["global", "streaming", "globalAC"]:
                        d = "na"
                    prefs_MS_comp.add(f"{g}.r_{r}.S_{S}.k_{k}.d_{d}")
    for k in K_VALS:
        for r in R_VALS_MOD:
            prefs_Pro_comp.add(f"{g}.r_{r}.S_prophasm.k_{k}.d_na")
            prefs_CBL_comp.add(f"{g}.r_{r}.S_none.k_{k}.d_na")
            prefs_SBWT_comp.add(f"{g}.r_{r}.S_none.k_{k}.d_0")
            prefs_SBWT_comp.add(f"{g}.r_{r}.S_none.k_{k}.d_1") # two variants of SBWT
prefs_MS_comp = sorted(list(prefs_MS_comp))
prefs_Pro_comp = sorted(list(prefs_Pro_comp))
prefs_SBWT_comp = sorted(list(prefs_SBWT_comp))
prefs_CBL_comp = sorted(list(prefs_CBL_comp))


print(f"Prefs for MS: {prefs_MS_comp}")
print(f"Prefs for Pro(Asm/Ex) and BWA: {prefs_Pro_comp}")
print(f"Prefs for SBWT: {prefs_SBWT_comp}")
print(f"Prefs for CBL: {prefs_CBL_comp}")

################################################################

rule all:
    input:
        "99_results/exp_01_build_index_results.tsv",

rule aggregate_data:
    input:
        f"99_results/camel_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/fmsi_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/fmsi_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/prophasm_memtime.{HOSTNAME}{testing_suffix}.tsv",
        #f"99_results/prophex_memtime.{HOSTNAME}{testing_suffix}.tsv", # PROPHEX REMOVED FOR NOW
        #f"99_results/prophex_query_memtime.{HOSTNAME}{testing_suffix}.tsv", # PROPHEX REMOVED FOR NOW
        f"99_results/bwa_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/bwa_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/sbwt_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/sbwt_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
        #f"99_results/cbl_memtime.{HOSTNAME}{testing_suffix}.tsv",
        #f"99_results/cbl_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/size_stats.{HOSTNAME}{testing_suffix}.tsv",
    output:
        "99_results/exp_01_build_index_results.tsv",
    shell:
        """
        cd 99_results/
        Rscript aggregate_data.R
        """


#####################################################################################################
# AGGREGATE STATISTICS
#####################################################################################################


rule aggregate_size_stats:
    output:
        tsv=f"99_results/size_stats.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"80_size_stats/{HOSTNAME}/fmsi.{p}.stats.tsv" for p in prefs_MS_comp],
        #[f"80_size_stats/{HOSTNAME}/prophex.{p}.stats.tsv" for p in prefs_Pro_comp], # PROPHEX REMOVED FOR NOW
        [f"80_size_stats/{HOSTNAME}/bwa.{p}.stats.tsv" for p in prefs_Pro_comp],
        [f"80_size_stats/{HOSTNAME}/sbwt.{p}.stats.tsv" for p in prefs_SBWT_comp],
        #[f"80_size_stats/{HOSTNAME}/cbl.{p}.stats.tsv" for p in prefs_CBL_comp],
    params:
        tsv=f"99_results/size_stats.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input}\\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | ./sort_output_tsv.py \\
            > {output.tsv}
        """
        
rule aggregate_camel_memtime_stats:
    output:
        tsv=f"99_results/camel_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"02_camel_memtime/{HOSTNAME}/{p}.t_superstring.tsv" for p in prefs_MS_comp],
    params:
        tsv=f"99_results/camel_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | ./sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_fmsi_memtime_stats:
    output:
        tsv=f"99_results/fmsi_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"03_fmsi_memtime/{HOSTNAME}/{p}.t_index.tsv" for p in prefs_MS_comp],
    params:
        tsv=f"99_results/fmsi_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | ./sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_fmsi_query_memtime_stats:
    output:
        tsv=f"99_results/fmsi_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"04_fmsi_query_memtime/{HOSTNAME}/{p}.t_0.tsv" for p in prefs_MS_comp],
        [f"04_fmsi_query_memtime/{HOSTNAME}/{p}.t_Pos.tsv" for p in prefs_MS_comp],
        [f"04_fmsi_query_memtime/{HOSTNAME}/{p}.t_Neg.tsv" for p in prefs_MS_comp],
    params:
        tsv=f"99_results/fmsi_query_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | ./sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_prophasm_memtime_stats:
    output:
        tsv=f"99_results/prophasm_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"06_prophasm_memtime/{HOSTNAME}/{p}.t_superstring.tsv" for p in prefs_Pro_comp],
    params:
        tsv=f"99_results/prophasm_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | ./sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_prophex_memtime_stats:
    output:
        tsv=f"99_results/prophex_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"07_prophex_memtime/{HOSTNAME}/{p}.t_index.tsv" for p in prefs_Pro_comp],
    params:
        tsv=f"99_results/prophex_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | ./sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_prophex_query_memtime_stats:
    output:
        tsv=f"99_results/prophex_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"08_prophex_query_memtime/{HOSTNAME}/{p}.t_0.tsv" for p in prefs_Pro_comp],
        [f"08_prophex_query_memtime/{HOSTNAME}/{p}.t_Pos.tsv" for p in prefs_Pro_comp],
        [f"08_prophex_query_memtime/{HOSTNAME}/{p}.t_Neg.tsv" for p in prefs_Pro_comp],
    params:
        tsv=f"99_results/prophex_query_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | ./sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_bwa_memtime_stats:
    output:
        tsv=f"99_results/bwa_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"15_bwa_memtime/{HOSTNAME}/{p}.t_index.tsv" for p in prefs_Pro_comp],
    params:
        tsv=f"99_results/bwa_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | ./sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_bwa_query_memtime_stats:
    output:
        tsv=f"99_results/bwa_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"16_bwa_query_memtime/{HOSTNAME}/{p}.t_0.tsv" for p in prefs_Pro_comp],
        [f"16_bwa_query_memtime/{HOSTNAME}/{p}.t_Pos.tsv" for p in prefs_Pro_comp],
        [f"16_bwa_query_memtime/{HOSTNAME}/{p}.t_Neg.tsv" for p in prefs_Pro_comp],
    params:
        tsv=f"99_results/bwa_query_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | ./sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_cbl_memtime_stats:
    output:
        tsv=f"99_results/cbl_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"21_cbl_memtime/{HOSTNAME}/{p}.t_index.tsv" for p in prefs_CBL_comp],
    params:
        tsv=f"99_results/cbl_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | ./sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_cbl_query_memtime_stats:
    output:
        tsv=f"99_results/cbl_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"22_cbl_query_memtime/{HOSTNAME}/{p}.t_0.tsv" for p in prefs_CBL_comp],
        [f"22_cbl_query_memtime/{HOSTNAME}/{p}.t_Pos.tsv" for p in prefs_CBL_comp],
        [f"22_cbl_query_memtime/{HOSTNAME}/{p}.t_Neg.tsv" for p in prefs_CBL_comp],
    params:
        tsv=f"99_results/cbl_query_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | ./sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_sbwt_memtime_stats:
    output:
        tsv=f"99_results/sbwt_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"11_sbwt_memtime/{HOSTNAME}/{p}.t_index.tsv" for p in prefs_SBWT_comp],
    params:
        tsv=f"99_results/sbwt_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | ./sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_sbwt_query_memtime_stats:
    output:
        tsv=f"99_results/sbwt_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"12_sbwt_query_memtime/{HOSTNAME}/{p}.t_0.tsv" for p in prefs_SBWT_comp],
        [f"12_sbwt_query_memtime/{HOSTNAME}/{p}.t_Pos.tsv" for p in prefs_SBWT_comp],
        [f"12_sbwt_query_memtime/{HOSTNAME}/{p}.t_Neg.tsv" for p in prefs_SBWT_comp],
    params:
        tsv=f"99_results/sbwt_query_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | ./sort_output_tsv.py \\
            > {output.tsv}
        """

#####################################################################################################
# COMPUTE QUERY FILE
#####################################################################################################

rule compute_queries_noHeader:
    input:
        fa=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r{r}.fa.xz",
    output:
        q="42_query_fastas/{g}.r_{r}.k_{k}-queries-noHeader.fa",
    params:
        get_queries=GET_QUERIES,
        num_queries=NUM_QUERIES,
    shell:
        """
        {params.get_queries} -k {wildcards.k} -cap {params.num_queries} <(xzcat {input.fa}) >{output.q}
        """

rule compute_queries_wHeader:
    input:
        fa=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r{r}.fa.xz",
    output:
        q="42_query_fastas/{g}.r_{r}.k_{k}-queries-wHeader.fa",
    params:
        get_queries=GET_QUERIES,
        num_queries=NUM_QUERIES,
    shell:
        """
        {params.get_queries} -k {wildcards.k} -cap {params.num_queries} -print_header True <(xzcat {input.fa}) >{output.q}
        """

rule compute_queries_wHeaderAndRCs:
    input:
        fa=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r{r}.fa.xz",
    output:
        q="42_query_fastas/{g}.r_{r}.k_{k}-queries-wHeader-wRCs.fa",
    params:
        get_queries=GET_QUERIES,
        num_queries=NUM_QUERIES,
    shell:
        """
        {params.get_queries} -k {wildcards.k} -cap {params.num_queries} -print_header True -print_RC True <(xzcat {input.fa}) >{output.q}
        """

rule compute_queries_neg_noHeader:
    input:
        fa=f"GRCh38.p14.chromosome1.fasta",
        faExcl=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r1.0.fa.xz",
    output:
        q="42_query_fastas/{g}.k_{k}-queries-neg-noHeader.fa",
    params:
        get_queries=GET_QUERIES,
        num_queries=NUM_QUERIES,
    shell:
        """
        {params.get_queries} -k {wildcards.k} -cap {params.num_queries} -e <(xzcat {input.faExcl}) {input.fa} >{output.q}
        """

rule compute_queries_neg_wHeader:
    input:
        fa=f"GRCh38.p14.chromosome1.fasta",
        faExcl=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r1.0.fa.xz",
    output:
        q="42_query_fastas/{g}.k_{k}-queries-neg-wHeader.fa",
    params:
        get_queries=GET_QUERIES,
        num_queries=NUM_QUERIES,
    shell:
        """
        {params.get_queries} -k {wildcards.k} -cap {params.num_queries} -print_header True -e <(xzcat {input.faExcl}) {input.fa} >{output.q}
        """

rule compute_queries_neg_wHeaderAndRCs:
    input:
        fa=f"GRCh38.p14.chromosome1.fasta",
        faExcl=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r1.0.fa.xz",
    output:
        q="42_query_fastas/{g}.k_{k}-queries-neg-wHeader-wRCs.fa",
    params:
        get_queries=GET_QUERIES,
        num_queries=NUM_QUERIES,
    shell:
        """
        {params.get_queries} -k {wildcards.k} -cap {params.num_queries} -print_header True -print_RC True -e <(xzcat {input.faExcl}) {input.fa} >{output.q}
        """

#rule decompress_nonsubsampled_fasta:
#    input:
#        fa="{g}.fa.xz",
#    output:
#        fa="{g}.fa",
#    shell:
#        """
#        xzcat {input.fa} >{output.fa}
#        """

#####################################################################################################
# COUNT KMERS
#####################################################################################################

# HACK TO AVOID COUNTING K-MERS MORE TIMES: we assume that global is always run for every genome, rate, and k
rule count_kmers:
    output:
        txt="80_size_stats/{g}.r_{r}.k_{k}.kmerCount",
    input:
        txt="01_MS_index/{g}.r_{r}.S_global.k_{k}.d_na.fa",
    priority: 50
    shell:
        """
        ../../scripts/count_kmers.py -k {wildcards.k} -t -p {input.txt} > {output.txt}
        """


#####################################################################################################
# RUN CAMEL + FMS-index
#####################################################################################################

# TODO: Once Camel can read from the standard input (passed by -), xzcat should be
#       moved before and piped in (to remove it from the memtime measurements)
rule run_kmer_camel:
    input:
        fa=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r{r}.fa.xz",
        hw=f"00_hw_info/{HOSTNAME}.txt",
    output:
        fa="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa",
        log0=f"02_camel_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_superstring.log",
    wildcard_constraints:
        S='|'.join(CAMEL_ALGS),
    params:
        d_param=lambda wildcards: f"-d {wildcards.d}" if wildcards.d != "na" else "",
        camel=CAMEL,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.camel} -c -k {wildcards.k} {params.d_param} -p <(xzcat {input.fa}) -a {wildcards.S}" \\
            > {output.fa}
        """

rule run_fmsi:
    input:
        fa="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa",
    output:
        fm9="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fm9",
        klcp="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.klcp",
        mask="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.mask",
        log0=f"03_fmsi_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_index.log",
    wildcard_constraints:
        S='|'.join(CAMEL_ALGS),
    params:
        fmsi=FMSI,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.fmsi} index -k {wildcards.k} -p {input.fa}" 
        """

rule run_fmsi_query:
    input:
        fa="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa",
        fm9="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fm9",
        klcp="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.klcp",
        mask="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.mask",
        q0="42_query_fastas/{g}.r_1.0.k_{k}-queries-noHeader.fa",
        qPos="42_query_fastas/{g}.r_{r}.k_{k}-queries-noHeader.fa",
        qNeg="42_query_fastas/{g}.k_{k}-queries-neg-noHeader.fa",
    output:
        log0=f"04_fmsi_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_0.log",
        logPos=f"04_fmsi_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_Pos.log",
        logNeg=f"04_fmsi_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_Neg.log",
    wildcard_constraints:
        S='|'.join(CAMEL_ALGS),
    params:
        fmsi=FMSI,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.fmsi} query -k {wildcards.k} -p {input.fa} -q {input.q0} >/dev/null 2>/dev/null" 
        ../../scripts/benchmark.py --log "{output.logPos}" \\
            "{params.fmsi} query -k {wildcards.k} -p {input.fa} -q {input.qPos} >/dev/null 2>/dev/null" 
        ../../scripts/benchmark.py --log "{output.logNeg}" \\
            "{params.fmsi} query -k {wildcards.k} -p {input.fa} -q {input.qNeg} >/dev/null 2>/dev/null" 
        """

rule make_fmsi_stats:
    input:
        fm9="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fm9",
        klcp="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.klcp",
        mask="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.mask",
        kmerCnt="80_size_stats/{g}.r_{r}.k_{k}.kmerCount",
    output:
        stats=f"80_size_stats/{HOSTNAME}/" + "fmsi.{g}.r_{r}.S_{S}.k_{k}.d_{d}.stats.tsv"
    params:
        pref="fmsi.{g}.S_{S}.k_{k}.d_{d}",
        num_queries=NUM_QUERIES,
    priority: 50
    shell:
        """
        (
        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' genome rate I_alg S_alg k d
        printf '\\t'

        #2
        printf '%s\\t%s\\t%s' kmer_count num_queries index_bytes
        printf '\\t'

        #3
        #printf '%s\\t%s' build_time_s build_mem_kb
        #printf '\\t'

        #4
        #printf '%s\\t%s' query_time_s query_mem_kb
        #printf '\\t'

        # final
        printf '%s' pref
        printf '\\n'


        ##################################

        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' \\
            {wildcards.g} \\
            {wildcards.r} \\
            "fmsi" \\
            {wildcards.S} \\
            {wildcards.k} \\
            {wildcards.d} 
        printf '\\t'

        #2
        printf '%d\\t%d\\t%d' \\
            $(cat {input.kmerCnt} | xargs echo) \\
            {params.num_queries} \\
            $(cat {input.fm9} {input.klcp} {input.mask} | wc -c)
        printf '\\t'

        #3
        #printf '%s\\t%s' \\
        #printf '\\t'

        #4
        #printf '%s\\t%s' query_time_s query_mem_kb
        #printf '\\t'

        #final
        printf '%s' \\
            {params.pref}
        printf '\\n'

        ) > {output.stats}
        """


#####################################################################################################
# RUN PROPHASM + PROPHEX or BWA
#####################################################################################################

rule run_prophasm:
    input:
        fa=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r{r}.fa.xz",
    output:
        fa="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa",
        log0=f"06_prophasm_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_superstring.log",
    params:
        prophasm=PROPHASM,
        #tmpoutput="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa",
    shell:
        """
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.prophasm} -k {wildcards.k} -i <(xzcat {input.fa}) -o {output.fa}"
        """
        #xz -0 {params.tmpoutput}


rule cp_prophasm:
    input:
        fa="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa",
    output:
        fa="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa",
    shell:
        """
        cp {input.fa} {output.fa}
        """

rule run_prophex:
    input:
        fa="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa",
    output:
        amb="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.amb",
        ann="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.ann",
        bwt="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.bwt",
        pac="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.pac",
        sa="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.sa",
        log0=f"07_prophex_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_index.log",
    params:
        prophex=PROPHEX,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.prophex} index -k {wildcards.k} {input.fa}"
        """

rule run_prophex_query:
    input:
        fa="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa",
        amb="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.amb",
        ann="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.ann",
        bwt="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.bwt",
        pac="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.pac",
        sa="05_prophasm_prophex_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.sa",
        q0="42_query_fastas/{g}.r_1.0.k_{k}-queries-wHeader.fa",
        qPos="42_query_fastas/{g}.r_{r}.k_{k}-queries-wHeader.fa",
        qNeg="42_query_fastas/{g}.k_{k}-queries-neg-wHeader.fa",
    output:
        log0=f"08_prophex_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_0.log",
        logPos=f"08_prophex_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_Pos.log",
        logNeg=f"08_prophex_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_Neg.log",
    params:
        prophex=PROPHEX,
        threads=NUM_THREADS,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.prophex} query -k {wildcards.k} -t {params.threads} {input.fa} {input.q0} >/dev/null"
        ../../scripts/benchmark.py --log "{output.logPos}" \\
            "{params.prophex} query -k {wildcards.k} -t {params.threads} {input.fa} {input.qPos} >/dev/null"
        ../../scripts/benchmark.py --log "{output.logNeg}" \\
            "{params.prophex} query -k {wildcards.k} -t {params.threads} {input.fa} {input.qNeg} >/dev/null"
        """

rule run_bwa:
    input:
        fa="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa",
    output:
        amb="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.amb",
        ann="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.ann",
        bwt="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.bwt",
        pac="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.pac",
        sa="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.sa",
        log0=f"15_bwa_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_index.log",
    params:
        bwa=BWA,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.bwa} index {input.fa}"
        """

rule run_bwa_query:
    input:
        fa="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa",
        amb="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.amb",
        ann="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.ann",
        bwt="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.bwt",
        pac="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.pac",
        sa="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.sa",
        q0="42_query_fastas/{g}.r_1.0.k_{k}-queries-wHeader.fa",
        qPos="42_query_fastas/{g}.r_{r}.k_{k}-queries-wHeader.fa",
        qNeg="42_query_fastas/{g}.k_{k}-queries-neg-wHeader.fa",
    output:
        log0=f"16_bwa_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_0.log",
        logPos=f"16_bwa_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_Pos.log",
        logNeg=f"16_bwa_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_Neg.log",
    params:
        bwa=BWA,
        w=BWA_PARAM_W,
        threads=NUM_THREADS,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.bwa} fastmap -l {wildcards.k} -w {params.w} {input.fa} {input.q0} >/dev/null"
        ../../scripts/benchmark.py --log "{output.logPos}" \\
            "{params.bwa} fastmap -l {wildcards.k} -w {params.w} {input.fa} {input.qPos} >/dev/null"
        ../../scripts/benchmark.py --log "{output.logNeg}" \\
            "{params.bwa} fastmap -l {wildcards.k} -w {params.w} {input.fa} {input.qNeg} >/dev/null"
        """

rule make_prophex_BWA_stats:
    input:
        amb="05_prophasm_{I}_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.amb",
        ann="05_prophasm_{I}_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.ann",
        bwt="05_prophasm_{I}_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.bwt",
        pac="05_prophasm_{I}_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.pac",
        sa="05_prophasm_{I}_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.sa",
        kmerCnt="80_size_stats/{g}.r_{r}.k_{k}.kmerCount",
    output:
        stats=f"80_size_stats/{HOSTNAME}/" + "{I}.{g}.r_{r}.S_{S}.k_{k}.d_{d}.stats.tsv",
    wildcard_constraints:
        I="prophex|bwa",
    params:
        pref="{I}.{g}.S_{S}.k_{k}.d_{d}",
        num_queries=NUM_QUERIES,
    priority: 50
    shell:
        """
        (
        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' genome rate I_alg S_alg k d
        printf '\\t'

        #2
        printf '%s\\t%s\\t%s' kmer_count num_queries index_bytes
        printf '\\t'

        #3
        #printf '%s\\t%s' build_time_s build_mem_kb
        #printf '\\t'

        #4
        #printf '%s\\t%s' query_time_s query_mem_kb
        #printf '\\t'

        # final
        printf '%s' pref
        printf '\\n'


        ##################################

        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' \\
            {wildcards.g} \\
            {wildcards.r} \\
            {wildcards.I} \\
            {wildcards.S} \\
            {wildcards.k} \\
            {wildcards.d} 
        printf '\\t'

        #2
        printf '%d\\t%d\\t%d' \\
            $(cat {input.kmerCnt} | xargs echo) \\
            {params.num_queries} \\
            $(cat {input.amb} {input.ann} {input.bwt} {input.pac} {input.sa} | wc -c)
        printf '\\t'

        #3
        #printf '%s\\t%s' \\
        #printf '\\t'

        #4
        #printf '%s\\t%s' query_time_s query_mem_kb
        #printf '\\t'

        #final
        printf '%s' \\
            {params.pref}
        printf '\\n'

        ) > {output.stats}
        """


#####################################################################################################
# RUN SBWT
#####################################################################################################

# Two variants
# - d=0: with param. --add-reverse-complements, which handles reverse complements (RCs)
# - d=1: without that param. but we query each k-mer and then its RC separately
# Both need the same input file (uncompressed), so both are handled by this rule (can also separate jobs for both runs)
rule build_sbwt:
    input:
        fa=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r{r}.fa.xz",
    output:
        sbwt="10_sbwt_index/{g}.r_{r}.S_none.k_{k}.d_0.fa.sbwt",
        sbwt_noRCs="10_sbwt_index/{g}.r_{r}.S_none.k_{k}.d_1.fa.sbwt",
        log0=f"11_sbwt_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_0.t_index.log",
        log0_noRCs=f"11_sbwt_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_1.t_index.log",
    params:
        sbwt=SBWT,
        sbwtVariant=SBWT_VARIANT,
        threads=NUM_THREADS,
        memory=SBWT_RAM,
        tmpinput="10_sbwt_index/{g}_subsampled_k{k}_r{r}.fa",
        tmpdir=SBWT_TMP_DIR+"sbwt_tmp_{g}_subsampled_k{k}_r{r}.fa/",
    shell:
        """
        mkdir -p {params.tmpdir}
        xzcat {input.fa} >{params.tmpinput}
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.sbwt} build -k {wildcards.k} -t {params.threads} -m {params.memory} -d {params.tmpdir} -i {params.tmpinput} -o {output.sbwt} --add-reverse-complements --variant {params.sbwtVariant}"
        rm -f {params.tmpdir}*
        ../../scripts/benchmark.py --log "{output.log0_noRCs}" \\
            "{params.sbwt} build -k {wildcards.k} -t {params.threads} -m {params.memory} -d {params.tmpdir} -i {params.tmpinput} -o {output.sbwt_noRCs} --variant {params.sbwtVariant}"
        rm -rf {params.tmpdir}
        rm -f {params.tmpinput}
        """

rule run_sbwt_query:
    input:
        sbwt="10_sbwt_index/{g}.r_{r}.S_none.k_{k}.d_0.fa.sbwt",
        sbwt_noRCs="10_sbwt_index/{g}.r_{r}.S_none.k_{k}.d_1.fa.sbwt",
        q0="42_query_fastas/{g}.r_1.0.k_{k}-queries-wHeader.fa",
        q0_wRCs="42_query_fastas/{g}.r_1.0.k_{k}-queries-wHeader-wRCs.fa",
        qPos="42_query_fastas/{g}.r_{r}.k_{k}-queries-wHeader.fa",
        qPos_wRCs="42_query_fastas/{g}.r_{r}.k_{k}-queries-wHeader-wRCs.fa",
        qNeg="42_query_fastas/{g}.k_{k}-queries-neg-wHeader.fa",
        qNeg_wRCs="42_query_fastas/{g}.k_{k}-queries-neg-wHeader-wRCs.fa",
    output:
        log0=f"12_sbwt_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_0.t_0.log",
        log0_noRCs=f"12_sbwt_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_1.t_0.log",
        logPos=f"12_sbwt_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_0.t_Pos.log",
        logPos_noRCs=f"12_sbwt_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_1.t_Pos.log",
        logNeg=f"12_sbwt_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_0.t_Neg.log",
        logNeg_noRCs=f"12_sbwt_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_1.t_Neg.log",
    params:
        sbwt=SBWT,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.sbwt} search -i {input.sbwt} -q {input.q0} -o /dev/null"
        ../../scripts/benchmark.py --log "{output.log0_noRCs}" \\
            "{params.sbwt} search -i {input.sbwt_noRCs} -q {input.q0_wRCs} -o /dev/null"
        ../../scripts/benchmark.py --log "{output.logPos}" \\
            "{params.sbwt} search -i {input.sbwt} -q {input.qPos} -o /dev/null"
        ../../scripts/benchmark.py --log "{output.logPos_noRCs}" \\
            "{params.sbwt} search -i {input.sbwt_noRCs} -q {input.qPos_wRCs} -o /dev/null"
        ../../scripts/benchmark.py --log "{output.logNeg}" \\
            "{params.sbwt} search -i {input.sbwt} -q {input.qNeg} -o /dev/null"
        ../../scripts/benchmark.py --log "{output.logNeg_noRCs}" \\
            "{params.sbwt} search -i {input.sbwt_noRCs} -q {input.qNeg_wRCs} -o /dev/null"
        """

rule make_sbwt_stats:
    input:
        sbwt="10_sbwt_index/{g}.r_{r}.S_none.k_{k}.d_{d}.fa.sbwt",
        kmerCnt="80_size_stats/{g}.r_{r}.k_{k}.kmerCount",
    output:
        stats=f"80_size_stats/{HOSTNAME}/" + "sbwt.{g}.r_{r}.S_{S}.k_{k}.d_{d}.stats.tsv"
    params:
        pref="sbwt.{g}.S_{S}.k_{k}.d_{d}",
        num_queries=NUM_QUERIES,
    priority: 50
    shell:
        """
        (
        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' genome rate I_alg S_alg k d
        printf '\\t'

        #2
        printf '%s\\t%s\\t%s' kmer_count num_queries index_bytes
        printf '\\t'

        #3
        #printf '%s\\t%s' build_time_s build_mem_kb
        #printf '\\t'

        #4
        #printf '%s\\t%s' query_time_s query_mem_kb
        #printf '\\t'

        # final
        printf '%s' pref
        printf '\\n'


        ##################################

        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' \\
            {wildcards.g} \\
            {wildcards.r} \\
            "sbwt" \\
            {wildcards.S} \\
            {wildcards.k} \\
            {wildcards.d} 
        printf '\\t'

        #2
        printf '%d\\t%d\\t%d' \\
            $(cat {input.kmerCnt} | xargs echo) \\
            {params.num_queries} \\
            $(cat {input.sbwt} | wc -c)
        printf '\\t'

        #3
        #printf '%s\\t%s' \\
        #printf '\\t'

        #4
        #printf '%s\\t%s' query_time_s query_mem_kb
        #printf '\\t'

        #final
        printf '%s' \\
            {params.pref}
        printf '\\n'

        ) > {output.stats}
        """
        # $(cat {input.q} | grep -v ">" | wc -l) \\ 

#####################################################################################################
# RUN CBL directly on the FASTA file
#####################################################################################################

rule run_cbl:
    input:
        fa=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r{r}.fa.xz",
    output:
        ind="20_cbl_index/{g}.r_{r}.S_none.k_{k}.d_na.fa.cblIndex",
        log0=f"21_cbl_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_na.t_index.log",
    params:
        cbl=CBL_PREF + "{k}" + CBL_SUFF,
        tmpinput="20_cbl_index/{g}_subsampled_k{k}_r{r}.fa",
    shell:
        """
        xzcat {input.fa} >{params.tmpinput}
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.cbl} build -c -o {output.ind} {params.tmpinput}"
        rm -f {params.tmpinput}
        """

rule run_cbl_query:
    input:
        ind="20_cbl_index/{g}.r_{r}.S_none.k_{k}.d_na.fa.cblIndex",
        q0="42_query_fastas/{g}.r_1.0.k_{k}-queries-wHeader.fa",
        qPos="42_query_fastas/{g}.r_{r}.k_{k}-queries-wHeader.fa",
        qNeg="42_query_fastas/{g}.k_{k}-queries-neg-wHeader.fa",
    output:
        log0=f"22_cbl_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_na.t_0.log",
        logPos=f"22_cbl_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_na.t_Pos.log",
        logNeg=f"22_cbl_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_na.t_Neg.log",
    params:
        cbl=CBL_PREF + "{k}" + CBL_SUFF,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.cbl} query {input.ind} {input.q0} >/dev/null"
        ../../scripts/benchmark.py --log "{output.logPos}" \\
            "{params.cbl} query {input.ind} {input.qPos} >/dev/null"
        ../../scripts/benchmark.py --log "{output.logNeg}" \\
            "{params.cbl} query {input.ind} {input.qNeg} >/dev/null"
        """

rule make_cbl_stats:
    input:
        ind="20_cbl_index/{g}.r_{r}.S_none.k_{k}.d_na.fa.cblIndex",
        kmerCnt="80_size_stats/{g}.r_{r}.k_{k}.kmerCount",
    output:
        stats=f"80_size_stats/{HOSTNAME}/" + "cbl.{g}.r_{r}.S_{S}.k_{k}.d_{d}.stats.tsv",
    params:
        pref="cbl.{g}.S_{S}.k_{k}.d_{d}",
        num_queries=NUM_QUERIES,
    priority: 50
    shell:
        """
        (
        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' genome rate I_alg S_alg k d
        printf '\\t'

        #2
        printf '%s\\t%s\\t%s' kmer_count num_queries index_bytes
        printf '\\t'

        #3
        #printf '%s\\t%s' build_time_s build_mem_kb
        #printf '\\t'

        #4
        #printf '%s\\t%s' query_time_s query_mem_kb
        #printf '\\t'

        # final
        printf '%s' pref
        printf '\\n'


        ##################################

        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' \\
            {wildcards.g} \\
            {wildcards.r} \\
            "cbl" \\
            {wildcards.S} \\
            {wildcards.k} \\
            {wildcards.d} 
        printf '\\t'

        #2
        printf '%d\\t%d\\t%d' \\
            $(cat {input.kmerCnt} | xargs echo) \\
            {params.num_queries} \\
            $(cat {input.ind} | wc -c)
        printf '\\t'

        #3
        #printf '%s\\t%s' \\
        #printf '\\t'

        #4
        #printf '%s\\t%s' query_time_s query_mem_kb
        #printf '\\t'

        #final
        printf '%s' \\
            {params.pref}
        printf '\\n'

        ) > {output.stats}
        """

#####################################################################################################
# REFORMATTING MEMTIME LOG (for all algs.)
#####################################################################################################

rule reformat_memtime_logs:
    output:
        "{dir}" + f"_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_{t}.tsv",
    input:
        "{dir}" + f"_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_{t}.log",
    params:
        pref="{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_{t}",
    priority: 50
    shell:
        """
        (
            printf 'pref\\tgenome\\trate\\tprog\\tS_alg\\tk\\td\\tqType\\t'

            cat {input} \\
                | grep real

            printf '%s\\t%s\\t%s\\t%s\\t%s\\t%d\\t%s\\t%s\\t' \\
                {params.pref} \\
                {wildcards.g} \\
                {wildcards.r} \\
                {wildcards.dir} \\
                {wildcards.S} \\
                {wildcards.k} \\
                {wildcards.d} \\
                {wildcards.t} \\
            ;

            cat {input} \\
                | grep -Ev '(real|#)'

        ) > {output}
        """


#####################################################################################################
# GET HW INFO ABOUT THE CURRENT COMPUTER
#####################################################################################################


rule add_hw_info:
    output:
        hw=f"00_hw_info/{HOSTNAME}.txt",
    priority: 50
    shell:
        """
        ../../scripts/print_hw_info.sh > {output.hw}
        """
